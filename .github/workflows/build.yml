name: Build

on:
  push:
    branches: [main]
    paths-ignore:
      - 'resources/normal/base/lang/**/*.po'
  pull_request:
    branches: [main]
    paths:
      - '.github/workflows/build.yml'
      - 'platform/**'
      - 'resources/**'
      - '!resources/normal/base/lang/**/*.po' # Ignore changes in .po files
      - 'sdk/**'
      - 'src/**'
      - 'stored_apps/**'
      - 'tools/**'
      - 'third_party/**'
      - 'waftools/**'
      - 'waf'
      - 'wscript'
    

env:
  ARM_GNU_TOOLCHAIN_VERSION: 14.2.rel1
  EM_VERSION: 4.0.1
  EM_CACHE_FOLDER: 'emsdk-cache'

jobs:
  build:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        board: ["snowy_bb2", "spalding_bb2", "silk_bb2", "asterix"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Setup emsdk cache
        id: cache-emsdk
        uses: actions/cache@v4
        with:
          path: ${{env.EM_CACHE_FOLDER}}
          key: emsdk-${{env.EM_VERSION}}-${{ runner.os }}

      - uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Set up environment
        run: |
          sudo apt-get update
          sudo apt-get install -y gettext gcc-multilib
          pip install -r requirements.txt
          wget --no-verbose "https://developer.arm.com/-/media/Files/downloads/gnu/${ARM_GNU_TOOLCHAIN_VERSION}/binrel/arm-gnu-toolchain-${ARM_GNU_TOOLCHAIN_VERSION}-x86_64-arm-none-eabi.tar.xz"
          sudo tar xf arm-gnu-toolchain-${ARM_GNU_TOOLCHAIN_VERSION}-x86_64-arm-none-eabi.tar.xz -C /opt
          echo "/opt/arm-gnu-toolchain-${ARM_GNU_TOOLCHAIN_VERSION}-x86_64-arm-none-eabi/bin" >> $GITHUB_PATH

      - uses: mymindstorm/setup-emsdk@v14
        with:
          version: ${{env.EM_VERSION}}
          actions-cache-folder: ${{env.EM_CACHE_FOLDER}}

      - name: Configure
        run: ./waf configure --board ${{ matrix.board }}

      - name: Build FW
        run: ./waf build

      - name: Bundle
        run: ./waf bundle

      - name: Build recovery FW
        if: ${{ matrix.board == 'asterix' }}
        run: ./waf build_prf

      - name: Bundle recovery FW
        if: ${{ matrix.board == 'asterix' }}
        run: ./waf bundle_prf

      - name: Store firmware bundles
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ matrix.board }}
          path: |
            build/**/*.elf
            build/**/*.pbz

      - name: Obtain platform name
        id: get-platform
        run: |
          BOARD=${{ matrix.board }}
          PLATFORM=${BOARD%%_*}
          echo "platform=$PLATFORM" >> "$GITHUB_OUTPUT"

      - name: Configure bootloader
        if: ${{ matrix.board == 'asterix' }}
        working-directory: platform/${{ steps.get-platform.outputs.platform }}/boot
        run: ./waf configure --board ${{ matrix.board }}

      - name: Build bootloader
        if: ${{ matrix.board == 'asterix' }}
        working-directory: platform/${{ steps.get-platform.outputs.platform }}/boot
        run: ./waf build

      - name: Store bootloader images
        if: ${{ matrix.board == 'asterix' }}
        uses: actions/upload-artifact@v4
        with:
          name: bootloader-${{ matrix.board }}
          path: |
            platform/${{ steps.get-platform.outputs.platform }}/boot/build/tintin_boot.*

      - name: Configure (QEMU)
        if: ${{ matrix.board != 'asterix' }}
        run: ./waf clean configure --board ${{ matrix.board }} --qemu

      - name: Build FW (QEMU)
        if: ${{ matrix.board != 'asterix' }}
        run: ./waf build qemu_image_micro qemu_image_spi

      - name: Store firmware images (QEMU)
        if: ${{ matrix.board != 'asterix' }}
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ matrix.board }}-qemu
          path: |
            build/qemu_micro_flash.bin
            build/qemu_spi_flash.bin
      - name: Upload POT template
        if: ${{ matrix.board == 'asterix' }}
        uses: actions/upload-artifact@v4
        with:
          name: translation-template-${{ matrix.board }}
          path: build/src/fw/tintin.pot
          if-no-files-found: error
          retention-days: 1
      

  crowdin_sync:
    runs-on: ubuntu-24.04
    needs: build
    if: ${{ github.event_name == 'push' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          pattern: translation-template-asterix
          merge-multiple: true
          path: .

      - name: Setup Crowdin
        uses: crowdin/github-action@v2
        with:
          upload_sources: true
          push_translations: true
          download_translations: true
          create_pull_request: true
          commit_message: 'chore: update translations from Crowdin'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CROWDIN_PROJECT_ID: ${{ secrets.CROWDIN_PROJECT_ID }}
          CROWDIN_PERSONAL_TOKEN: ${{ secrets.CROWDIN_PERSONAL_TOKEN }}
